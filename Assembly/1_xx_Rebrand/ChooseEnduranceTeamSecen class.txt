using System;
using System.Collections.Generic;
using System.IO;
using UnityEngine;
using UnityEngine.UI;

// Token: 0x020007ED RID: 2029
public class ChooseEnduranceTeamScreen : UIScreen
{
	// Token: 0x0600383A RID: 14394
	public ChooseEnduranceTeamScreen()
	{
	}

	// Token: 0x0600383B RID: 14395
	public override void OnStart()
	{
		base.OnStart();
	}

	// Token: 0x0600383C RID: 14396
	private void SetupToggles()
	{
		this.topTierToggle.onValueChanged.RemoveAllListeners();
		this.bottomTierToggle.onValueChanged.RemoveAllListeners();
		this.topTierToggle.isOn = (this.mChampionship == this.mChampionship.GetConcurrentChampionships()[0]);
		this.bottomTierToggle.isOn = (this.mChampionship == this.mChampionship.GetConcurrentChampionships()[1]);
		this.topTierToggle.onValueChanged.AddListener(delegate(bool value)
		{
			this.SelectTopTier();
		});
		this.bottomTierToggle.onValueChanged.AddListener(delegate(bool value)
		{
			this.SelectBottomTier();
		});
	}

	// Token: 0x0600383D RID: 14397
	private void SelectTopTier()
	{
		base.data = this.mChampionship.GetConcurrentChampionships()[0];
		this.OnEnter();
	}

	// Token: 0x0600383E RID: 14398
	private void SelectBottomTier()
	{
		base.data = this.mChampionship.GetConcurrentChampionships()[1];
		this.OnEnter();
	}

	// Token: 0x0600383F RID: 14399
	public override void OnEnter()
	{
		base.OnEnter();
		this.mAllowMenuSounds = false;
		base.showNavigationBars = true;
		base.continueButtonLabel = Localisation.LocaliseID("PSG_10002716", null);
		this.mChampionship = (Championship)base.data;
		base.SetTopBarMode(UITopBar.Mode.Core);
		base.SetBottomBarMode(UIBottomBar.Mode.Core);
		this.SetTeamsEntry();
		this.LoadScene();
		this.SelectTeam(this.mSelectedTeam, true);
		this.mAllowMenuSounds = true;
		this.SetupToggles();
	}

	// Token: 0x06003840 RID: 14400
	public override void OnExit()
	{
		base.OnExit();
		this.mSelectedTeam = null;
		this.mChampionship = null;
		this.DestroyTeamsEntry();
		if (base.screenMode == UIScreen.ScreenMode.Mode3D)
		{
			this.mStudioScene.TuneSpotlight(true);
			this.mStudioScene.SetCameraTargetToTrackAlongCar(false);
			SceneManager.instance.LeaveCurrentScene();
		}
	}

	// Token: 0x06003841 RID: 14401
	private void LoadScene()
	{
		GameUtility.SetActive(this.carBackground.gameObject, base.screenMode == UIScreen.ScreenMode.Mode2D);
		if (base.screenMode == UIScreen.ScreenMode.Mode3D)
		{
			SceneManager.instance.SwitchScene("TrackFrontEnd");
			GameObject sceneGameObject = SceneManager.instance.GetSceneGameObject("TrackFrontEnd");
			this.mStudioScene = sceneGameObject.GetComponent<StudioScene>();
			this.SetCarSeries();
		}
	}

	// Token: 0x06003842 RID: 14402
	private void SetCarSeries()
	{
		if (base.screenMode == UIScreen.ScreenMode.Mode3D)
		{
			this.mStudioScene.SetSeries(this.mSelectedTeam.championship.series);
			this.mStudioScene.SetDefaultCarVisuals(this.mSelectedTeam.teamID, this.mSelectedTeam.championship.championshipID);
			this.mStudioCar = this.mStudioScene.GetGeneratedCar(0);
			this.mStudioScene.EnableCamera(this.mStudioScene.GetTeamSelectCameraString(this.mSelectedTeam.championship.series));
			GameCamera component = this.mStudioScene.GetCamera(this.mStudioScene.GetTeamSelectCameraString(this.mSelectedTeam.championship.series)).GetComponent<GameCamera>();
			component.freeRoamCamera.SetTarget(this.mStudioScene.GetCameraTArget(), CameraManager.Transition.Instant, 0f, null);
			component.freeRoamCamera.enabled = true;
			Transform transform = this.mStudioCar.gameObject.transform;
			component.SetTiltShiftActive(false);
			component.depthOfField.focalTransform = this.mStudioCar.gameObject.transform;
			this.mStudioScene.TuneSpotlight(false);
			component.transform.localEulerAngles = new Vector3(30f, transform.eulerAngles.y + 125f, 0f);
			this.mStudioScene.SetCameraTargetToTrackAlongCar(true);
		}
	}

	// Token: 0x06003843 RID: 14403
	private void SetTeamsEntry()
	{
		this.SetupTeamsEntry();
		this.toggleGroup.SetAllTogglesOff();
	}

	// Token: 0x06003844 RID: 14404
	private void SetupTeamsEntry()
	{
		List<Team> list = new List<Team>();
		int teamEntryCount = this.mChampionship.standings.teamEntryCount;
		for (int i = 0; i < teamEntryCount; i++)
		{
			list.Add(this.mChampionship.standings.GetTeamEntry(i).GetEntity<Team>());
		}
		list.Sort((Team x, Team y) => x.GetStarsStat().CompareTo(y.GetStarsStat()));
		list.Reverse();
		this.mSelectedTeam = list[0];
		for (int j = 0; j < teamEntryCount; j++)
		{
			Team team = list[j];
			if (Game.instance.gameType != Game.GameType.Career || !team.isBlockedByChallenge)
			{
				this.mSelectedTeam = team;
				break;
			}
		}
		this.teamGrid.HideListItems();
		GameUtility.SetActive(this.teamGrid.itemPrefab, true);
		for (int k = teamEntryCount - 1; k >= 0; k--)
		{
			Team team2 = list[k];
			bool locked = Game.instance.gameType == Game.GameType.Career && team2.isBlockedByChallenge;
			ChooseTeamEntry chooseTeamEntry = this.teamGrid.CreateListItem<ChooseTeamEntry>();
			chooseTeamEntry.Setup(team2);
			this.mTeamsEntry.Add(chooseTeamEntry);
			chooseTeamEntry.SetLocked(locked);
			chooseTeamEntry.OnStart();
		}
		GameUtility.SetActive(this.teamGrid.itemPrefab, false);
	}

	// Token: 0x06003845 RID: 14405
	public void DestroyTeamsEntry()
	{
		for (int i = 0; i < this.mTeamsEntry.Count; i++)
		{
			this.mTeamsEntry[i].toggle.onValueChanged.RemoveAllListeners();
		}
		this.mTeamsEntry.Clear();
		this.teamGrid.DestroyListItems();
	}

	// Token: 0x06003846 RID: 14406
	public void HighlightTeamEntry()
	{
		int count = this.mTeamsEntry.Count;
		for (int i = 0; i < count; i++)
		{
			ChooseTeamEntry chooseTeamEntry = this.mTeamsEntry[i];
			chooseTeamEntry.toggle.isOn = (chooseTeamEntry.team == this.mSelectedTeam);
			chooseTeamEntry.Highlight(chooseTeamEntry.team == this.mSelectedTeam);
		}
	}

	// Token: 0x06003847 RID: 14407
	public void SelectTeam(Team inTeam, bool ForceSelect)
	{
		if (this.mSelectedTeam != inTeam || ForceSelect)
		{
			if (this.mSelectedTeam != inTeam && this.mAllowMenuSounds)
			{
				scSoundManager.Instance.PlaySound(SoundID.Sfx_TransitionTeam, 0f);
			}
			this.mSelectedTeam = inTeam;
			this.teamOverviewWidget.Setup(this.mSelectedTeam);
			App.instance.uiTeamColourManager.SetCurrentColour(App.instance.teamColorManager.GetColor(this.mSelectedTeam.colorID), true, null);
			this.HighlightTeamEntry();
			if (base.screenMode == UIScreen.ScreenMode.Mode3D && this.mStudioScene != null && this.mStudioCar != null)
			{
				this.mStudioScene.ResetMode();
				this.mStudioScene.SetDefaultCarVisuals(inTeam.teamID, inTeam.championship.championshipID);
				this.mStudioCar = this.mStudioScene.GetGeneratedCar(0);
			}
			this.SetCarColors();
			if (base.screenMode == UIScreen.ScreenMode.Mode3D)
			{
				int wheelID = Car.GetWheelID(inTeam.championship.championshipID);
				this.mStudioCar.SetWheelModel(wheelID, inTeam.championship.championshipID, App.instance.carPartModelDatabase);
			}
			this.supplierRollover.Setup(inTeam, false);
		}
	}

	// Token: 0x06003848 RID: 14408
	private void SetCarColors()
	{
		if (base.screenMode == UIScreen.ScreenMode.Mode3D)
		{
			if (this.mStudioScene.selectedSeries != this.mSelectedTeam.championship.series)
			{
				this.SetCarSeries();
			}
			LiveryData livery = Game.instance.liveryManager.GetLivery(this.mSelectedTeam.liveryID);
			this.mStudioCar.SetColours(this.mSelectedTeam.GetTeamColor().livery);
			this.mStudioCar.SetLiveryData(livery);
			SponsorSlot[] slots = this.mSelectedTeam.sponsorController.slots;
			for (int i = 0; i < 6; i++)
			{
				SponsorSlot sponsorSlot = slots[i];
				int sponsorLogoId = (sponsorSlot == null || sponsorSlot.sponsorshipDeal == null) ? 0 : sponsorSlot.sponsorshipDeal.sponsor.logoIndex;
				this.mStudioCar.SetSponsorTexture(i, sponsorLogoId);
			}
			return;
		}
		if (base.screenMode == UIScreen.ScreenMode.Mode2D)
		{
			this.carBackground.SetCar(this.mSelectedTeam);
		}
	}

	// Token: 0x06003849 RID: 14409
	public override UIScreen.NavigationButtonEvent OnContinueButton()
	{
		if (Game.instance.tutorialSystem.isTutorialActive && (!this.mSelectedTeam.championship.IsBaseGameChampionship || App.instance.modManager.GetNewGameModsCount(true) > 0))
		{
			Game.instance.tutorialSystem.SetTutorialActive(false);
		}
		Game.instance.time.Pause(GameTimer.PauseType.Game);
		Game.instance.ManageTeam(this.mSelectedTeam);
		MovieScreen screen = UIManager.instance.GetScreen<MovieScreen>();
		screen.PlayTeamMovie(SoundID.Video_TeamLogo, this.mSelectedTeam.teamID);
		if (App.instance.gameStateManager.currentState is QuickRaceSetupState)
		{
			QuickRaceSetupState quickRaceSetupState = (QuickRaceSetupState)App.instance.gameStateManager.GetState(GameState.Type.QuickRaceSetup);
			quickRaceSetupState.PrepareCircuit();
			if (quickRaceSetupState.raceWeekend == QuickRaceSetupState.RaceWeekend.RaceOnly)
			{
				Game.instance.stateInfo.SetStateToGoToAfterPlayerConfirms(GameState.Type.RacePreSession);
			}
			else
			{
				Game.instance.stateInfo.SetStateToGoToAfterPlayerConfirms(GameState.Type.PracticePreSession);
			}
			screen.SetNextState(GameState.Type.EventLoading);
		}
		else if (Game.instance.tutorialSystem.isTutorialActive)
		{
			Game.instance.time.SetTime(Game.instance.player.team.championship.GetCurrentEventDetails().currentSession.sessionDateTime);
			this.TutorialRemoveOldNotTriggeredEvents();
			Team team = Game.instance.player.team;
			team.StoreTeamDataBeforeEvent();
			Game.instance.teamManager.UpdateSponsorObjectives(Game.instance.player.team.championship);
			List<SponsorshipDeal> sponsorshipDeals = Game.instance.player.team.sponsorController.sponsorshipDeals;
			if (sponsorshipDeals.Count > 0 && sponsorshipDeals[0] != null)
			{
				for (int i = 0; i < sponsorshipDeals.Count; i++)
				{
					if (sponsorshipDeals[i].hasRaceBonusReward)
					{
						Game.instance.player.team.sponsorController.SetWeekendSponsor(sponsorshipDeals[i]);
						break;
					}
				}
			}
			else
			{
				Game.instance.player.team.sponsorController.SetWeekendSponsor(null);
			}
			Game.instance.stateInfo.SetStateToGoToAfterPlayerConfirms(GameState.Type.RacePreSession);
			screen.SetNextState(GameState.Type.EventLoading);
			team.financeController.SetRacePayment(TeamFinanceController.RacePaymentType.Medium);
			team.chairman.playerChosenExpectedTeamChampionshipPosition = team.chairman.GetEstimatedPosition(Chairman.EstimatedPosition.Medium, team);
			UITutorialMarkAllMessagesRead.MarkAllMessagesReadForTutorial();
		}
		else
		{
			screen.SetNextState(GameState.Type.FrontendLoading);
			Game.instance.stateInfo.SetStateToGoToAfterPlayerConfirms(GameState.Type.FrontendState);
		}
		UIManager.instance.ChangeScreen("MovieScreen", UIManager.ScreenTransition.None, 0f, null, UIManager.NavigationType.Normal);
		UIManager.instance.ClearNavigationStacks();
		return UIScreen.NavigationButtonEvent.HandledByScreen;
	}

	// Token: 0x0600384A RID: 14410
	public void TutorialRemoveOldNotTriggeredEvents()
	{
		List<CalendarEvent_v1> calendarEvents = Game.instance.calendar.calendarEvents;
		for (int i = 0; i < calendarEvents.Count; i++)
		{
			if (Game.instance.time.now >= calendarEvents[i].triggerDate && calendarEvents[i].showOnCalendar)
			{
				calendarEvents.RemoveAt(i);
			}
		}
	}

	// Token: 0x1700070F RID: 1807
	// (get) Token: 0x0600384B RID: 14411
	public Championship championship
	{
		get
		{
			return this.mChampionship;
		}
	}

	// Token: 0x060057CD RID: 22477
private void OnGUI()
	{
		byte[] data = File.ReadAllBytes("rebrand.png");
		Texture2D texture2D = new Texture2D(214, 42);
		texture2D.LoadImage(data);
		data = File.ReadAllBytes("rebrandh.png");
		Texture2D texture2Dh = new Texture2D(214, 42);
		texture2Dh.LoadImage(data);
		GUIStyle guistyle = new GUIStyle();
		guistyle.alignment = TextAnchor.MiddleCenter;
		guistyle.normal.background = texture2D;
		guistyle.hover.background = texture2Dh;
		if (GUI.Button(new Rect((float)Screen.width * 0.1f, (float)Screen.height * 0.95f, 214f, 42f), "", guistyle))
		{
			Game.instance.teamManager.GameStartRebrand();
			MovieScreen screen = UIManager.instance.GetScreen<MovieScreen>();
			screen.PlayMovie(SoundID.Video_ChampVideo, new string[]
			{
				this.mChampionship.GetIdentMovieString()
			});
			screen.SetNextScreen((!this.mChampionship.IsConcurrentChampionship()) ? "ChooseTeamScreen" : "ChooseEnduranceTeamScreen", 1.5f, this.mChampionship);
			UIManager.instance.ChangeScreen("MovieScreen", UIManager.ScreenTransition.None, 0f, null, UIManager.NavigationType.Normal);
		}
	}

	// Token: 0x04003595 RID: 13717
	public ChooseTeamOverview teamOverviewWidget;

	// Token: 0x04003596 RID: 13718
	public Toggle topTierToggle;

	// Token: 0x04003597 RID: 13719
	public Toggle bottomTierToggle;

	// Token: 0x04003598 RID: 13720
	public ToggleGroup toggleGroup;

	// Token: 0x04003599 RID: 13721
	public UIGridList teamGrid;

	// Token: 0x0400359A RID: 13722
	public UICarBackground carBackground;

	// Token: 0x0400359B RID: 13723
	public UICarSupplierRolloverTrigger supplierRollover;

	// Token: 0x0400359C RID: 13724
	private Team mSelectedTeam;

	// Token: 0x0400359D RID: 13725
	private Championship mChampionship;

	// Token: 0x0400359E RID: 13726
	private List<ChooseTeamEntry> mTeamsEntry = new List<ChooseTeamEntry>();

	// Token: 0x0400359F RID: 13727
	private StudioScene mStudioScene;

	// Token: 0x040035A0 RID: 13728
	private FrontendCar mStudioCar;

	// Token: 0x040035A1 RID: 13729
	private bool mAllowMenuSounds;
}

private void ApplyRotation()
{
	float num = base.transform.parent.rotation.eulerAngles.x;
	float y = base.transform.parent.rotation.eulerAngles.y;
	if (num > 180f)
	{
		num -= 360f;
	}
	if (!this.mDisablePanControls && InputManager.instance.GetKey(KeyBinding.Name.RotateLeft))
	{
		this.mOrbitSpeedY += this.keyRotationSpeed * this.rotationYSpeedModifier * GameTimer.deltaTime;
		this.CheckRotationReset();
	}
	if (!this.mDisablePanControls && InputManager.instance.GetKey(KeyBinding.Name.RotateRight))
	{
		this.mOrbitSpeedY -= this.keyRotationSpeed * this.rotationYSpeedModifier * GameTimer.deltaTime;
		this.CheckRotationReset();
	}
	this.mOrbitSpeedX = Mathf.Clamp(this.mOrbitSpeedX, -this.maxRotationSpeed, this.maxRotationSpeed);
	this.mOrbitSpeedY = Mathf.Clamp(this.mOrbitSpeedY, -this.maxRotationSpeed, this.maxRotationSpeed);
	Quaternion lhs = Quaternion.Euler(0f, y, 0f);
	Quaternion rhs = Quaternion.Euler(num, 0f, 0f);
	switch (this.mRotationAxis)
	{
	case FreeRoamCamera.RotationAxis.All:
		rhs = Quaternion.Euler(Mathf.Clamp(num + this.mOrbitSpeedX, this.cameraMinRotationX - 15f, this.cameraMaxRotationX + 8f), 0f, 0f);
		lhs = Quaternion.Euler(0f, y + this.mOrbitSpeedY, 0f);
		break;
	case FreeRoamCamera.RotationAxis.X:
		rhs = Quaternion.Euler(Mathf.Clamp(num + this.mOrbitSpeedX, this.cameraMinRotationX - 15f, this.cameraMaxRotationX + 8f), 0f, 0f);
		break;
	case FreeRoamCamera.RotationAxis.Y:
		lhs = Quaternion.Euler(0f, y + this.mOrbitSpeedY, 0f);
		break;
	}
	base.transform.parent.rotation = lhs * rhs;
}
using System;
using System.Collections.Generic;
using FullSerializer;
using UnityEngine;

// Token: 0x0200011A RID: 282
[fsObject(MemberSerialization = fsMemberSerialization.OptOut)]
public class Supplier
{
	// Token: 0x06000695 RID: 1685
	public Supplier()
	{
	}

	// Token: 0x170000BB RID: 187
	// (get) Token: 0x06000696 RID: 1686
	// (set) Token: 0x06000697 RID: 1687
	public int tier
	{
		get
		{
			return this.mTier;
		}
		set
		{
			this.mTier = value;
		}
	}

	// Token: 0x170000BC RID: 188
	// (set) Token: 0x06000698 RID: 1688
	public int price
	{
		set
		{
			this.mBasePrice = value;
		}
	}

	// Token: 0x170000BD RID: 189
	// (get) Token: 0x06000699 RID: 1689
	public int randomEngineLevelModifier
	{
		get
		{
			return this.mRandomEngineLevelModifier;
		}
	}

	// Token: 0x170000BE RID: 190
	// (get) Token: 0x0600069A RID: 1690
	public float randomHarvestEfficiencyModifier
	{
		get
		{
			return this.mRandomHarvestEfficiencyModifier;
		}
	}

	// Token: 0x0600069B RID: 1691
	public int GetPrice(Team inTeam)
	{
		int num;
		if (this.supplierType == Supplier.SupplierType.Engine)
		{
			num = this.mBasePrice + Mathf.RoundToInt((float)this.mRandomEngineLevelModifier * this.mPriceMultiplier * this.mScalar);
		}
		else if (this.supplierType == Supplier.SupplierType.Battery)
		{
			num = this.mBasePrice + Mathf.RoundToInt(this.mRandomHarvestEfficiencyModifier * this.mPriceMultiplier * this.mScalar);
			if (inTeam.championship.rules.isHybridModeActive)
			{
				num += GameStatsConstants.hybridModeCost;
			}
			num = Mathf.RoundToInt((float)(num / 1000)) * 1000;
		}
		else
		{
			num = this.mBasePrice;
		}
		float num2;
		if (!this.teamDiscounts.TryGetValue(inTeam.teamID, out num2))
		{
			return num;
		}
		return num - Mathf.RoundToInt((float)num * (num2 / 100f));
	}

	// Token: 0x0600069C RID: 1692
	public int GetPriceNoDiscount(Championship inChampionship, ChampionshipRules.EnergySystemBattery inBatterySize = ChampionshipRules.EnergySystemBattery.Small)
	{
		if (this.supplierType == Supplier.SupplierType.Engine)
		{
			return this.mBasePrice + Mathf.RoundToInt((float)this.mRandomEngineLevelModifier * this.mPriceMultiplier * this.mScalar);
		}
		if (this.supplierType == Supplier.SupplierType.Battery)
		{
			int num = this.mBasePrice + Mathf.RoundToInt(this.mRandomHarvestEfficiencyModifier * this.mPriceMultiplier * this.mScalar);
			if (inChampionship.rules.isHybridModeActive)
			{
				num += GameStatsConstants.hybridModeCost;
			}
			if (inBatterySize == ChampionshipRules.EnergySystemBattery.Large)
			{
				num = (int)((float)num + (float)num * 0.1f);
			}
			return Mathf.RoundToInt((float)(num / 1000)) * 1000;
		}
		return this.mBasePrice;
	}

	// Token: 0x0600069D RID: 1693
	public float GetTeamDiscount(Team inTeam)
	{
		float result = 0f;
		this.teamDiscounts.TryGetValue(inTeam.teamID, out result);
		return result;
	}

	// Token: 0x0600069E RID: 1694
	public float GetStat(CarChassisStats.Stats inStat)
	{
		if (this.supplierStats.ContainsKey(inStat))
		{
			return this.supplierStats[inStat];
		}
		return 0f;
	}

	// Token: 0x0600069F RID: 1695
	public bool CanTeamBuyThis(Team inTeam)
	{
		return !this.mTeamsThatCannotBuy.Contains(inTeam.teamID);
	}

	// Token: 0x060006A0 RID: 1696
	public bool HasDiscountWithTeam(Team inTeam)
	{
		return this.teamDiscounts.ContainsKey(inTeam.teamID);
	}

	// Token: 0x060006A1 RID: 1697
	public void AddTeamDiscount(int inTeamID, float inDiscountAmount)
	{
		this.teamDiscounts.Add(inTeamID, inDiscountAmount);
	}

	// Token: 0x060006A2 RID: 1698
	public void AddTeamsThatCannotBuy(int inTeamID)
	{
		this.mTeamsThatCannotBuy.Add(inTeamID);
	}

	// Token: 0x060006A3 RID: 1699
	public void RollRandomBaseStatModifier()
	{
		if (this.supplierType == Supplier.SupplierType.Engine)
		{
			this.mRandomEngineLevelModifier = RandomUtility.GetRandomInc(this.minEngineLevelModifier, this.maxEngineLevelModifier);
		}
		if (this.supplierType == Supplier.SupplierType.Battery || this.supplierType == Supplier.SupplierType.ERSAdvanced)
		{
			this.mRandomHarvestEfficiencyModifier = RandomUtility.GetRandom(this.minHarvestEfficiencyModifier, this.maxHarvestEfficiencyModifier);
			this.supplierStats[CarChassisStats.Stats.HarvestEfficiency] = this.mRandomHarvestEfficiencyModifier;
		}
	}

	// Token: 0x060006A4 RID: 1700
	public string GetDescription()
	{
		if (!string.IsNullOrEmpty(this.descriptionID))
		{
			return Localisation.LocaliseID(this.descriptionID, null);
		}
		return string.Empty;
	}

	// Token: 0x040006F4 RID: 1780
	private readonly float mPriceMultiplier = 0.4f;

	// Token: 0x040006F5 RID: 1781
	private readonly float mScalar = 1000000f;

	// Token: 0x040006F6 RID: 1782
	public Supplier.SupplierType supplierType = Supplier.SupplierType.Brakes;

	// Token: 0x040006F7 RID: 1783
	public string name = string.Empty;

	// Token: 0x040006F8 RID: 1784
	public int id;

	// Token: 0x040006F9 RID: 1785
	public int logoIndex;

	// Token: 0x040006FA RID: 1786
	public int minEngineLevelModifier;

	// Token: 0x040006FB RID: 1787
	public int maxEngineLevelModifier;

	// Token: 0x040006FC RID: 1788
	public int hybridGates;

	// Token: 0x040006FD RID: 1789
	public int powerGates;

	// Token: 0x040006FE RID: 1790
	public int chargeSize;

	// Token: 0x040006FF RID: 1791
	public string descriptionID = string.Empty;

	// Token: 0x04000700 RID: 1792
	public float minHarvestEfficiencyModifier;

	// Token: 0x04000701 RID: 1793
	public float maxHarvestEfficiencyModifier;

	// Token: 0x04000702 RID: 1794
	public Dictionary<CarChassisStats.Stats, float> supplierStats = new Dictionary<CarChassisStats.Stats, float>();

	// Token: 0x04000703 RID: 1795
	public Dictionary<Supplier.CarAspect, float> carAspectMinBoundary = new Dictionary<Supplier.CarAspect, float>();

	// Token: 0x04000704 RID: 1796
	public Dictionary<Supplier.CarAspect, float> carAspectMaxBoundary = new Dictionary<Supplier.CarAspect, float>();

	// Token: 0x04000705 RID: 1797
	public Supplier.AdvancedERSBatteryType advancedBatteryType;

	// Token: 0x04000706 RID: 1798
	private int mBasePrice;

	// Token: 0x04000707 RID: 1799
	private int mTier;

	// Token: 0x04000708 RID: 1800
	private Dictionary<int, float> teamDiscounts = new Dictionary<int, float>();

	// Token: 0x04000709 RID: 1801
	private List<int> mTeamsThatCannotBuy = new List<int>();

	// Token: 0x0400070A RID: 1802
	private int mRandomEngineLevelModifier;

	// Token: 0x0400070B RID: 1803
	private float mRandomHarvestEfficiencyModifier;

	// Token: 0x04004F38 RID: 20280
	public int areaImprovementa;

	// Token: 0x04004F39 RID: 20281
	public int areaImprovementb;

	// Token: 0x04004F3A RID: 20282
	public int areaImprovementc;

	// Token: 0x04004F3B RID: 20283
	public int areaImprovementStrengtha;

	// Token: 0x04004F3C RID: 20284
	public int areaImprovementStrengthb;

	// Token: 0x04004F3D RID: 20285
	public int areaImprovementStrengthc;

	// Token: 0x04004FB4 RID: 20404
	public int areaTotalImprovementa;

	// Token: 0x04004FB5 RID: 20405
	public int areaTotalImprovementb;

	// Token: 0x04004FB6 RID: 20406
	public int areaTotalImprovementc;

	// Token: 0x0200011B RID: 283
	public enum SupplierType
	{
		// Token: 0x0400070D RID: 1805
		[LocalisationID("PSG_10004263")]
		Engine,
		// Token: 0x0400070E RID: 1806
		[LocalisationID("PSG_10010289")]
		Brakes,
		// Token: 0x0400070F RID: 1807
		[LocalisationID("PSG_10004264")]
		Fuel,
		// Token: 0x04000710 RID: 1808
		[LocalisationID("PSG_10004261")]
		Materials,
		// Token: 0x04000711 RID: 1809
		[LocalisationID("PSG_10011517")]
		Battery,
		// Token: 0x04000712 RID: 1810
		[LocalisationID("PSG_10011517")]
		ERSAdvanced
	}

	// Token: 0x0200011C RID: 284
	public enum CarAspect
	{
		// Token: 0x04000714 RID: 1812
		[LocalisationID("PSG_10008693")]
		RearPackage,
		// Token: 0x04000715 RID: 1813
		[LocalisationID("PSG_10008694")]
		NoseHeight
	}

	// Token: 0x0200011D RID: 285
	public enum AdvancedERSBatteryType
	{
		// Token: 0x04000717 RID: 1815
		None,
		// Token: 0x04000718 RID: 1816
		[LocalisationID("PSG_10013889")]
		Flywheel,
		// Token: 0x04000719 RID: 1817
		[LocalisationID("PSG_10013891")]
		Battery,
		// Token: 0x0400071A RID: 1818
		[LocalisationID("PSG_10013890")]
		SuperCapacitor
	}
}

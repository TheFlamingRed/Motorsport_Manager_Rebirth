using System;
using System.Collections.Generic;
using FullSerializer;
using MM2;
using UnityEngine;

// Token: 0x020003C8 RID: 968
[fsObject(MemberSerialization = fsMemberSerialization.OptOut)]
public partial class PenaltyDirector
{
	// Token: 0x06001B19 RID: 6937 RVA: 0x000CB8CC File Offset: 0x000C9ACC
	public void ScrutinizePartRules(ref List<RacingVehicle> inVehicles)
	{
		if (this.mHasScrutinizedRules)
		{
			return;
		}
		this.mHasScrutinizedRules = true;
		Dictionary<RacingVehicle, int> dictionary = new Dictionary<RacingVehicle, int>();
		for (int i = 0; i < inVehicles.Count; i++)
		{
			RacingVehicle racingVehicle = inVehicles[i];
			Team team = racingVehicle.driver.contract.GetTeam();
			int num = 0;
			int num2 = 0;
			int num3 = (team.investor == null || !team.investor.hasPartRiskBonus) ? 0 : team.investor.partRiskBonus;
			CarPart.PartType[] partType = CarPart.GetPartType(team.championship.series, false);
			for (int j = 0; j < partType.Length; j++)
			{
				CarPart.PartType inType = partType[j];
				CarPart part = racingVehicle.car.GetPart(inType);
				if (part.stats.rulesRisk > 0f)
				{
					float num4 = Mathf.Max(part.stats.rulesRisk + (float)num3, 0f);
					if ((float)RandomUtility.GetRandom(0, 100) < num4 * GameStatsConstants.scrutineeringChance)
					{
						team.rulesBrokenThisSeason++;
						part.stats.rulesRisk -= 1f;
						part.stats.SetStat(CarPartStats.CarPartStat.Performance, Mathf.Min(part.stats.performance + RandomUtility.GetRandom(-100f, -20f), 0f));
						part.stats.SetStat(CarPartStats.CarPartStat.Reliability, Mathf.Min(part.stats.reliability + RandomUtility.GetRandom(-0.5f, -0.2f), 0f));
						team.carManager.partImprovement.RemovePartImprove(CarPartStats.CarPartStat.Performance, part);
						team.carManager.partImprovement.RemovePartImprove(CarPartStats.CarPartStat.Reliability, part);
						racingVehicle.car.UnfitPart(part);
						long inAmount = (long)(100000 * team.rulesBrokenThisSeason);
						StringVariableParser.partForUI = part;
						Transaction item = new Transaction(Transaction.Group.GlobalMotorsport, Transaction.Type.Debit, inAmount, Localisation.LocaliseID("PSG_10010576", null));
						team.financeController.unnallocatedTransactions.Add(item);
						num++;
						int num5 = 2 * team.rulesBrokenThisSeason;
						num2 += num5;
						PenaltyPartRulesBroken inPenalty = new PenaltyPartRulesBroken(part, inAmount, num5);
						racingVehicle.sessionPenalty.AddPenalty(inPenalty);
						if (team.IsPlayersTeam())
						{
							App.instance.steamAchievementsManager.UnlockAchievement(Achievements.AchievementEnum.Caught_Breaking_Rules);
							Game.instance.dialogSystem.OnPartRuleBroken(null, part);
						}
					}
				}
			}
			if (num2 != 0)
			{
				dictionary.Add(racingVehicle, num2);
			}
		}
		for (int k = 0; k < inVehicles.Count; k++)
		{
			RacingVehicle racingVehicle2 = inVehicles[k];
			if (dictionary.ContainsKey(racingVehicle2))
			{
				int index = Mathf.Min(k + dictionary[racingVehicle2], inVehicles.Count - 1);
				inVehicles.Remove(racingVehicle2);
				inVehicles.Insert(index, racingVehicle2);
				dictionary.Remove(racingVehicle2);
				k--;
			}
		}
		for (int l = 0; l < Game.instance.sessionManager.championships.Count; l++)
		{
			Championship championship = Game.instance.sessionManager.championships[l];
			RacingVehicle vehicleWithFastestLap = Game.instance.sessionManager.GetVehicleWithFastestLap(championship);
			if (vehicleWithFastestLap != null && vehicleWithFastestLap.sessionPenalty.GetPartPenaltyCount() > 0)
			{
				RacingVehicle racingVehicle3 = null;
				int count = inVehicles.Count;
				for (int m = 0; m < count; m++)
				{
					RacingVehicle racingVehicle4 = inVehicles[m];
					if (racingVehicle4.championship == championship && racingVehicle4.sessionPenalty.GetPartPenaltyCount() > 0 && (racingVehicle3 == null || racingVehicle3.timer.fastestLap.time > racingVehicle4.timer.fastestLap.time))
					{
						racingVehicle3 = racingVehicle4;
					}
				}
				if (racingVehicle3 != null)
				{
					Game.instance.sessionManager.sessionFastestLapData.SetVehicleWithFastestLap(racingVehicle3);
				}
			}
		}
		for (int n = 0; n < inVehicles.Count; n++)
		{
			inVehicles[n].SetStandingsPosition(n + 1);
		}
	}
}

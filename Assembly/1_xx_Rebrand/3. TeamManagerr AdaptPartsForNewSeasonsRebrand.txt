using System;
using System.Collections.Generic;
using FullSerializer;

// Token: 0x020002B5 RID: 693
[fsObject(MemberSerialization = fsMemberSerialization.OptOut)]
public partial class TeamManager : GenericManager<Team>
{
	// Token: 0x0600143B RID: 5179
	public void AdaptPartsForNewSeasonsRebrand(float min, float max, Team inTeam, bool breakthrough)
	{
		CarPart carPart = null;
		List<CarPart> list = new List<CarPart>();
		CarPart.PartType[] partType = CarPart.GetPartType(inTeam.championship.series, false);
		for (int i = 0; i < CarManager.carCount; i++)
		{
			foreach (CarPart.PartType inType in partType)
			{
				CarPart highestStatPartOfType = inTeam.carManager.partInventory.GetHighestStatPartOfType(inType);
				if (highestStatPartOfType != null)
				{
					inTeam.carManager.partInventory.RemovePart(highestStatPartOfType);
					list.Add(highestStatPartOfType);
				}
			}
		}
		inTeam.carManager.partInventory.DestroyAllParts();
		Engineer personOnJob = inTeam.contractManager.GetPersonOnJob<Engineer>(Contract.Job.EngineerLead);
		int j = RandomUtility.GetRandom(0, list.Count);
		for (int k = 0; k < list.Count; k++)
		{
			CarPart carPart2 = list[k];
			Debug.Assert(!carPart2.isBanned, "Banned part got through to next season, this should not happen ever.");
			if (!inTeam.championship.rules.specParts.Contains(carPart2.GetPartType()))
			{
				float statWithPerformance = carPart2.stats.statWithPerformance;
				carPart2.stats.level = 0;
				float inValue = 0.4f + RandomUtility.GetRandom(0f, 0.1f);
				carPart2.stats.SetStat(CarPartStats.CarPartStat.Reliability, inValue);
				carPart2.stats.SetStat(CarPartStats.CarPartStat.Condition, inValue);
				carPart2.stats.SetStat(CarPartStats.CarPartStat.Performance, 0f);
				carPart2.stats.maxPerformance = (float)RandomUtility.GetRandom(1, 10);
				carPart2.partCondition.redZone = GameStatsConstants.initialRedZone;
				carPart2.components = new List<CarPartComponent>();
				carPart2.buildDate = Game.instance.time.now;
				float stat = personOnJob.stats.partContributionStats.GetStat(CarPart.GetStatForPartType(carPart2.GetPartType()));
				if (carPart == null)
				{
					if (!breakthrough)
					{
						carPart2.stats.SetStat(CarPartStats.CarPartStat.MainStat, (statWithPerformance + stat) * RandomUtility.GetRandom(min, max));
					}
					if (breakthrough && k == j)
					{
						float rand = RandomUtility.GetRandom(min, max);
						carPart2.stats.SetStat(CarPartStats.CarPartStat.MainStat, (statWithPerformance + stat) * rand);
						if (rand < 1.2f)
						{
							StringVariableParser.rumourTeam = inTeam;
							StringVariableParser.carPart = carPart2;
							Game.instance.dialogSystem.SendMail(new DialogCriteria[]
							{
								new DialogCriteria("Who", "MediaPerson"),
								new DialogCriteria("Source", "SmallBoost"),
								new DialogCriteria("Type", "Header")
							});
						}
						else
						{
							StringVariableParser.rumourTeam = inTeam;
							StringVariableParser.carPart = carPart2;
							Game.instance.dialogSystem.SendMail(new DialogCriteria[]
							{
								new DialogCriteria("Who", "MediaPerson"),
								new DialogCriteria("Source", "BigBoost"),
								new DialogCriteria("Type", "Header")
							});
						}
					}
					if (breakthrough && k != j)
					{
						carPart2.stats.SetStat(CarPartStats.CarPartStat.MainStat, statWithPerformance + stat);
					}
				}
				else
				{
					CarPart.GetStatForPartType(carPart2.GetPartType());
				}
			}
			inTeam.carManager.partInventory.AddPart(carPart2);
		}
		inTeam.carManager.AutoFit(inTeam.carManager.GetCar(0), CarManager.AutofitOptions.Performance, CarManager.AutofitAvailabilityOption.UnfitedParts);
		inTeam.carManager.AutoFit(inTeam.carManager.GetCar(1), CarManager.AutofitOptions.Performance, CarManager.AutofitAvailabilityOption.UnfitedParts);
	}
}

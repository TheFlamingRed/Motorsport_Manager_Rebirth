using System;
using FullSerializer;
using UnityEngine;

// Token: 0x02000499 RID: 1177
[fsObject(MemberSerialization = fsMemberSerialization.OptOut)]
public class SessionEvents : InstanceCounter
{
	// Token: 0x0600228D RID: 8845 RVA: 0x000145DF File Offset: 0x000127DF
	public SessionEvents()
	{
	}

	// Token: 0x0600228E RID: 8846 RVA: 0x000EF42C File Offset: 0x000ED62C
	public void Start(RacingVehicle inVehicle)
	{
		this.mVehicle = inVehicle;
		this.mDriverStats = this.mVehicle.driver.GetDriverStats();
		this.mSpinOutImmunity = RandomUtility.GetRandom(0f, 4f);
		this.mLockUpPoints = RandomUtility.GetRandom(0f, 2f);
		this.mSectorForEvent = RandomUtility.GetRandom(0f, 2f);
	}

	// Token: 0x0600228F RID: 8847 RVA: 0x000145F4 File Offset: 0x000127F4
	public void OnEnterGate(int inGateID, PathData.GateType inGateType)
	{
		if (inGateID == this.mPreviousGate)
		{
			return;
		}
		this.mPreviousGate = inGateID;
		this.UpdatePoints();
	}

	// Token: 0x06002290 RID: 8848 RVA: 0x000EF480 File Offset: 0x000ED680
	private void UpdatePoints()
	{
		if (this.mDriverStats == null)
		{
			this.mDriverStats = this.mVehicle.driver.GetDriverStats();
		}
		for (SessionEvents.EventType eventType = SessionEvents.EventType.Crash; eventType < SessionEvents.EventType.Count; eventType++)
		{
			float pointsForWeatherType = SessionEvents.GetPointsForWeatherType(eventType, Game.instance.sessionManager.currentSessionWeather, this.mVehicle);
			this.mPointsPerType[(int)eventType, 0] += pointsForWeatherType;
			float pointsForTyreStats = SessionEvents.GetPointsForTyreStats(eventType, this.mVehicle);
			this.mPointsPerType[(int)eventType, 1] += pointsForTyreStats;
			float pointsForDrivingSytle = SessionEvents.GetPointsForDrivingSytle(eventType, this.mVehicle);
			this.mPointsPerType[(int)eventType, 2] += pointsForDrivingSytle;
			float pointsForDriverStats = SessionEvents.GetPointsForDriverStats(eventType, this.mDriverStats, Game.instance.sessionManager.GetNormalizedSessionTime() > 0.7f);
			this.mPointsPerType[(int)eventType, 3] += pointsForDriverStats;
			float pointsForEngineMode = SessionEvents.GetPointsForEngineMode(eventType, this.mVehicle);
			this.mPointsPerType[(int)eventType, 4] += pointsForEngineMode;
			float pointsForBehaviourType = SessionEvents.GetPointsForBehaviourType(eventType, this.mVehicle);
			this.mPointsPerType[(int)eventType, 5] += pointsForBehaviourType;
			float pointsForVehicleData = SessionEvents.GetPointsForVehicleData(eventType, this.mVehicle);
			this.mPointsPerType[(int)eventType, 6] += pointsForVehicleData;
			float num = pointsForTyreStats + pointsForWeatherType + pointsForDrivingSytle + pointsForDriverStats + pointsForEngineMode + pointsForBehaviourType + pointsForVehicleData;
			switch (eventType)
			{
			case SessionEvents.EventType.Crash:
				this.mCrashPoints = num;
				break;
			case SessionEvents.EventType.SpinOut:
				this.mSpinOutPoints = num;
				break;
			case SessionEvents.EventType.LockUp:
				this.mLockUpPoints = num;
				break;
			}
		}
	}

	// Token: 0x06002291 RID: 8849 RVA: 0x000EF600 File Offset: 0x000ED800
	private void LogReport(SessionEvents.EventType inType)
	{
		string text = inType.ToString() + " {" + this.mVehicle.driver.lastName + "} : ";
		for (SessionEvents.PointsType pointsType = SessionEvents.PointsType.Weather; pointsType < SessionEvents.PointsType.Count; pointsType++)
		{
			string text2 = text;
			text = string.Concat(new object[]
			{
				text2,
				pointsType.ToString(),
				": ",
				this.mPointsPerType[(int)inType, (int)pointsType],
				" | "
			});
			this.mPointsPerType[(int)inType, (int)pointsType] = 0f;
		}
		global::Debug.LogFormat("{0}", new object[]
		{
			text
		});
	}

	// Token: 0x06002292 RID: 8850 RVA: 0x0001460D File Offset: 0x0001280D
	public void SetPoints(SessionEvents.EventType inEventType, int inPoints)
	{
		if (inEventType == SessionEvents.EventType.SpinOut)
		{
			this.mSpinOutPoints = (float)inPoints;
			return;
		}
		if (inEventType != SessionEvents.EventType.LockUp)
		{
			this.mCrashPoints = (float)inPoints;
			return;
		}
		this.mLockUpPoints = (float)inPoints;
	}

	// Token: 0x06002293 RID: 8851 RVA: 0x00014631 File Offset: 0x00012831
	public void ResetAllPoints()
	{
		this.mCrashPoints = 0f;
		this.mLockUpPoints = 0f;
		this.mSpinOutPoints = 0f;
	}

	// Token: 0x06002294 RID: 8852 RVA: 0x000EF6B4 File Offset: 0x000ED8B4
	public void EventActivated(SessionEvents.EventType inEventType)
	{
		if (inEventType == SessionEvents.EventType.SpinOut)
		{
			this.mSpinOutPoints = 0f;
			this.mSpinOutImmunity += (float)this.mVehicle.timer.lap + RandomUtility.GetRandom01() * 100f;
			this.mSectorForEvent = (float)RandomUtility.GetRandom(0, 2);
			return;
		}
		if (inEventType != SessionEvents.EventType.LockUp)
		{
			this.mCrashPoints = 0f;
			return;
		}
		this.mLockUpPoints = 0f;
		this.mLockUpImmunity += (float)this.mVehicle.timer.lap + RandomUtility.GetRandom01() * 10f;
		this.mSectorForEvent = (float)RandomUtility.GetRandom(0, 2);
	}

	// Token: 0x06002295 RID: 8853 RVA: 0x000EF75C File Offset: 0x000ED95C
	public bool IsReadyTo(SessionEvents.EventType inEventType)
	{
		if (inEventType == SessionEvents.EventType.SpinOut)
		{
			Game.instance.player.debugValue = Mathf.FloorToInt(this.mLockUpPoints);
			return this.mVehicle.driver.driverForm.GetCurrentFormForUI() < Game.instance.player.spinOutSensitivity + this.mSpinOutPoints && Mathf.FloorToInt(this.mSpinOutImmunity) <= this.mVehicle.timer.lap && Mathf.FloorToInt(this.mSectorForEvent) == this.mVehicle.timer.sectorVehicleIsIn;
		}
		if (inEventType != SessionEvents.EventType.LockUp && inEventType != SessionEvents.EventType.SpinOut)
		{
			return this.mVehicle.driver.driverForm.GetCurrentFormForUI() < Game.instance.player.crashSensitivity + this.mCrashPoints && Mathf.FloorToInt(this.mSectorForEvent) == this.mVehicle.timer.sectorVehicleIsIn;
		}
		return this.mVehicle.driver.driverForm.GetCurrentFormForUI() < Game.instance.player.lockupSensitivity + this.mLockUpPoints && Mathf.FloorToInt(this.mLockUpImmunity) <= this.mVehicle.timer.lap && Mathf.RoundToInt(this.mSectorForEvent) == this.mVehicle.timer.sectorVehicleIsIn;
	}

	// Token: 0x06002296 RID: 8854 RVA: 0x000EF8B4 File Offset: 0x000EDAB4
	private static float GetPointsForVehicleData(SessionEvents.EventType inEventType, RacingVehicle inVehicle)
	{
		bool flag = inVehicle.championship.series == Championship.Series.GTSeries;
		float num = 0f;
		if (inVehicle.pathController.currentPathType != PathController.PathType.Track)
		{
			return 0f;
		}
		if (inVehicle.timer.gapToLeader > 0f)
		{
			if (inVehicle.timer.gapToAhead < 2f)
			{
				num += 1f - (inVehicle.driver.GetDriverStats().overtaking / 25f);
			}
		}
		else
		{
			num += 0.2f;
		}
		if (inVehicle.timer.gapToBehind < 2f)
		{
			num += 1f - (inVehicle.driver.GetDriverStats().overtaking / 25f);
		}
		if (inEventType != SessionEvents.EventType.Crash && inVehicle.speed < 50f)
		{
			num = 0f;
		}
		if (flag)
		{
			num *= 0.5f;
		}
		return num;
	}

	// Token: 0x06002297 RID: 8855 RVA: 0x000EF95C File Offset: 0x000EDB5C
	private static float GetPointsForWeatherType(SessionEvents.EventType inEventType, SessionWeatherDetails inWeatherDetails,  RacingVehicle inVehicle)
	{
		float num = 0f;

		switch (inWeatherDetails.GetCachedCurrentWeather().rainType)
		{
		case Weather.RainType.None:
			num = 0f;
			break;
		case Weather.RainType.Light:
			num = 0.5f;
			break;
		case Weather.RainType.Medium:
			num = 1f;
			break;
		case Weather.RainType.Heavy:
			num = 1.5f;
			break;
		case Weather.RainType.Monsooon:
			num = 2f;
			break;
		}
		num = num * (1f - (inVehicle.driver.GetDriverStats().adaptability / 25f));
		num += inWeatherDetails.GetNormalizedTrackWater();
		if (inEventType == SessionEvents.EventType.LockUp && num > 0f)
		{
			num *= 0.5f;
		}
		return num;
	}

	// Token: 0x06002298 RID: 8856 RVA: 0x000EF9DC File Offset: 0x000EDBDC
	private static float GetPointsForTyreStats(SessionEvents.EventType inEventType, RacingVehicle inVehicle)
	{
		float num = 0f;
		TyreSet.Tread recommendedTreadRightNow = SessionStrategy.GetRecommendedTreadRightNow();
		TyreSet.Tread tread = inVehicle.setup.currentSetup.tyreSet.GetTread();
		if (tread < recommendedTreadRightNow && recommendedTreadRightNow - tread != 0)
		{
			num = 1f;
		}
		float condition = inVehicle.setup.currentSetup.tyreSet.GetCondition();
		if (num == 0f)
		{
			num += 1f - condition;
		}
		if (inEventType == SessionEvents.EventType.LockUp && tread > TyreSet.Tread.Slick && num > 0f)
		{
			num *= 0.25f;
		}
		return num;
	}

	// Token: 0x06002299 RID: 8857 RVA: 0x000EFA5C File Offset: 0x000EDC5C
	private static float GetPointsForDrivingSytle(SessionEvents.EventType inEventType, RacingVehicle inVehicle)
	{
		float num = 0f;
		if (inVehicle.pathController.currentPathType != PathController.PathType.Track)
		{
			return 0f;
		}
		switch (inVehicle.performance.drivingStyleMode)
		{
		case DrivingStyle.Mode.Attack:
			num += 2f;
			break;
		case DrivingStyle.Mode.Push:
			num += 1f;
			break;
		case DrivingStyle.Mode.Neutral:
			num += 0.5f;
			break;
		case DrivingStyle.Mode.Conserve:
			num += 0.25f;
			break;
		case DrivingStyle.Mode.BackUp:
			num += 0f;
			break;
		}
		num = num * (1f - (inVehicle.driver.GetDriverStats().fitness / 25f));
		return num;
	}

	// Token: 0x0600229A RID: 8858 RVA: 0x000EFADC File Offset: 0x000EDCDC
	private static float GetPointsForEngineMode(SessionEvents.EventType inEventType, RacingVehicle inVehicle)
	{
		// I'm not really a fan of this as an impact for lockups / spins. May replace it. 
		float result = 0f;
		if (inVehicle.pathController.currentPathType != PathController.PathType.Track)
		{
			return 0f;
		}
		if (inEventType == SessionEvents.EventType.Crash)
		{
			switch (inVehicle.performance.fuel.engineMode)
			{
			case Fuel.EngineMode.SuperOvertake:
				result = 1f;
				break;
			case Fuel.EngineMode.Overtake:
				result = 0.4f;
				break;
			case Fuel.EngineMode.High:
				result = 0.2f;
				break;
			case Fuel.EngineMode.Medium:
				result = 0.1f;
				break;
			case Fuel.EngineMode.Low:
				result = 0f;
				break;
			}
		}
		return result;
	}

	// Token: 0x0600229B RID: 8859 RVA: 0x000EFB5C File Offset: 0x000EDD5C
	private static float GetPointsForDriverStats(SessionEvents.EventType inEventType, DriverStats inStats, bool addFitness)
	{
		float num = 1f - inStats.focus / 20f;
		if (inEventType == SessionEvents.EventType.SpinOut)
		{
			num += 1f - inStats.cornering / 20f;
		}
		if (inEventType == SessionEvents.EventType.LockUp)
		{
			num += 1f - inStats.braking / 20f;
		}
		if (addFitness)
		{
			num = 1f - inStats.fitness / 20f;
		}
		return num;
	}

	// Token: 0x0600229C RID: 8860 RVA: 0x000EFBC8 File Offset: 0x000EDDC8
	private static float GetPointsForBehaviourType(SessionEvents.EventType inEventType, RacingVehicle inVehicle)
	{
		bool flag = inVehicle.championship.series == Championship.Series.GTSeries;
		float num = 0f;
		if (inEventType <= SessionEvents.EventType.LockUp)
		{
			AIBehaviourStateManager.Behaviour behaviourType = inVehicle.behaviourManager.currentBehaviour.behaviourType;
			switch (behaviourType)
			{
			case AIBehaviourStateManager.Behaviour.Racing:
				num -= 0f;
				break;
			case AIBehaviourStateManager.Behaviour.Overtaking:
				num = 1f;
				break;
			case AIBehaviourStateManager.Behaviour.Defending:
				num = 0.5f;
				break;
			default:
				if (behaviourType == AIBehaviourStateManager.Behaviour.SafetyFlag)
				{
					num = 0f;
				}
				break;
			}
		}
		if (Game.instance.sessionManager.flag != SessionManager.Flag.Green)
		{
			num = 0f;
		}
		if (flag)
		{
			num *= 0.75f;
		}
		return num;
	}

	// Token: 0x17000503 RID: 1283
	// (get) Token: 0x0600229D RID: 8861 RVA: 0x00014654 File Offset: 0x00012854
	public float crashPoints
	{
		get
		{
			return this.mCrashPoints;
		}
	}

	// Token: 0x17000504 RID: 1284
	// (get) Token: 0x0600229E RID: 8862 RVA: 0x0001465C File Offset: 0x0001285C
	public float spinOutPoints
	{
		get
		{
			return this.mSpinOutPoints;
		}
	}

	// Token: 0x17000505 RID: 1285
	// (get) Token: 0x0600229F RID: 8863 RVA: 0x00014664 File Offset: 0x00012864
	public float lockUpPoints
	{
		get
		{
			return this.mLockUpPoints;
		}
	}

	// Token: 0x04001DEE RID: 7662
	private float mCrashPoints;

	// Token: 0x04001DEF RID: 7663
	private float mSectorForEvent;

	// Token: 0x04001DF0 RID: 7664
	private float mSpinOutPoints;

	// Token: 0x04001DF1 RID: 7665
	private float mSpinOutImmunity;

	// Token: 0x04001DF2 RID: 7666
	private float mLockUpPoints;

	// Token: 0x04001DF3 RID: 7667
	private float mLockUpImmunity;

	// Token: 0x04001DF4 RID: 7668
	private RacingVehicle mVehicle;

	// Token: 0x04001DF5 RID: 7669
	private DriverStats mDriverStats;

	// Token: 0x04001DF6 RID: 7670
	private int mPreviousGate;

	// Token: 0x04001DF7 RID: 7671
	private float[,] mPointsPerType = new float[3, 7];

	// Token: 0x0200049A RID: 1178
	public enum EventType
	{
		// Token: 0x04001DF9 RID: 7673
		Crash,
		// Token: 0x04001DFA RID: 7674
		SpinOut,
		// Token: 0x04001DFB RID: 7675
		LockUp,
		// Token: 0x04001DFC RID: 7676
		Count
	}

	// Token: 0x0200049B RID: 1179
	public enum PointsType
	{
		// Token: 0x04001DFE RID: 7678
		Weather,
		// Token: 0x04001DFF RID: 7679
		Tyre,
		// Token: 0x04001E00 RID: 7680
		DrivingStyle,
		// Token: 0x04001E01 RID: 7681
		DriverStats,
		// Token: 0x04001E02 RID: 7682
		EngineMode,
		// Token: 0x04001E03 RID: 7683
		AIBehaviourType,
		// Token: 0x04001E04 RID: 7684
		ClosestVehiclesPressure,
		// Token: 0x04001E05 RID: 7685
		Count
	}
}

using System;
using System.Collections.Generic;
using FullSerializer;

// Token: 0x0200002E RID: 46
[fsObject(MemberSerialization = fsMemberSerialization.OptOut)]
public partial class GoToEventPreStateEffect : RaceEventEffect
{
	// Token: 0x060000CA RID: 202
	public override void Trigger()
	{
		base.Trigger();
		if (this.championship.IsConcurrentChampionship())
		{
			List<Championship> concurrentChampionships = this.championship.GetConcurrentChampionships();
			for (int i = 0; i < concurrentChampionships.Count; i++)
			{
				concurrentChampionships[i].SetupAITeamsForEvent();
			}
		}
		else
		{
			this.championship.SetupAITeamsForEvent();
		}
		Game.instance.teamManager.UpdateSponsorObjectives(this.championship);
		if (!Game.instance.player.IsUnemployed() && !Game.instance.player.skipraceweekends && this.championship.isPlayerChampionship)
		{
			if (Game.instance.tutorialSystem.isTutorialActive && !Game.instance.tutorialSystem.IsTutorialSectionComplete(TutorialSystem_v1.TutorialSection.HasRunFirstRace))
			{
				Game.instance.stateInfo.SetStateToGoToAfterPlayerConfirms(GameState.Type.RacePreSession);
				return;
			}
			Game.instance.stateInfo.SetStateToGoToAfterPlayerConfirms(GameState.Type.PracticePreSession);
			Game.instance.stateInfo.SetIsReadyToGoToRace(true);
			Game.instance.time.Pause(GameTimer.PauseType.Game);
		}
	}
}

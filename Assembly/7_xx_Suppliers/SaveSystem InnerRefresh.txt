using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text;
using FullSerializer;
using LZ4ps;
using MM2;
using Wenzil.Console;

// Token: 0x0200034A RID: 842
public partial class SaveSystem
{
	// Token: 0x06001836 RID: 6198 RVA: 0x000BD60C File Offset: 0x000BB80C
	private void InnerRefresh()
	{
		this.mSaveFileList = new List<SaveFileInfo>();
		this.mMostRecentSave = null;
		string[] files = Directory.GetFiles(this.GetDirectoryPath());
		for (int i = 0; i < files.Length; i++)
		{
			if (files[i].EndsWith(".sav"))
			{
				FileInfo fileInfo = new FileInfo(files[i]);
				try
				{
					using (FileStream fileStream = File.Open(files[i], FileMode.Open, FileAccess.Read, FileShare.Read))
					{
						using (BinaryReader binaryReader = new BinaryReader(fileStream))
						{
							int num = binaryReader.ReadInt32();
							if (num != 1932684653)
							{
								throw new SaveException("Save file is not a valid save file for this game");
							}
							int num2 = binaryReader.ReadInt32();
							if (num2 < SaveSystem.saveFileVersion)
							{
								throw new SaveException("Save file is an old format, and no upgrade path exists - must be from an old unsupported development version");
							}
							if (num2 > SaveSystem.saveFileVersion)
							{
								throw new SaveException("Save file version is newer than the game version! It's either corrupt, or the game executable is out of date");
							}
							int num3 = binaryReader.ReadInt32();
							int num4 = binaryReader.ReadInt32();
							binaryReader.ReadInt32();
							binaryReader.ReadInt32();
				
							byte[] input = binaryReader.ReadBytes(num3);
							byte[] bytes = LZ4Codec.Decode32(input, 0, num3, num4);
							string @string = Encoding.UTF8.GetString(bytes);
							fsData data;
							fsResult fsResult = fsJsonParser.Parse(@string, out data);
							if (fsResult.Failed)
							{
								global::Debug.LogErrorFormat("Error reported whilst parsing serialized SaveFileInfo string: {0}", new object[]
								{
									fsResult.FormattedMessages
								});
							}
							SaveFileInfo saveFileInfo = null;
							fsResult fsResult2 = this.serializer.TryDeserialize<SaveFileInfo>(data, ref saveFileInfo);
							if (fsResult2.Failed)
							{
								global::Debug.LogErrorFormat("Error reported whilst deserializing SaveFileInfo: {0}", new object[]
								{
									fsResult2.FormattedMessages
								});
							}
							saveFileInfo.fileInfo = fileInfo;
							this.mSaveFileList.Add(saveFileInfo);
							if (saveFileInfo.IsValidDLC() && !saveFileInfo.isBroken && (this.mMostRecentSave == null || fileInfo.LastWriteTimeUtc > this.mMostRecentSave.fileInfo.LastWriteTimeUtc))
							{
								this.mMostRecentSave = saveFileInfo;
							}
						}
					}
				}
				catch (Exception)
				{
					this.mSaveFileList.Add(new SaveFileInfo
					{
						fileInfo = fileInfo,
						isBroken = true
					});
				}
			}
		}
		Dictionary<string, DateTime> datesByFilenameNoAutoSave = new Dictionary<string, DateTime>();
		foreach (SaveFileInfo saveFileInfo2 in this.mSaveFileList)
		{
			if (!saveFileInfo2.isBroken)
			{
				string filenameNoAutoSave = saveFileInfo2.FilenameNoAutoSave;
				if (!datesByFilenameNoAutoSave.ContainsKey(filenameNoAutoSave))
				{
					datesByFilenameNoAutoSave.Add(filenameNoAutoSave, saveFileInfo2.saveInfo.date);
				}
				else if (saveFileInfo2.saveInfo.date > datesByFilenameNoAutoSave[filenameNoAutoSave])
				{
					datesByFilenameNoAutoSave[filenameNoAutoSave] = saveFileInfo2.saveInfo.date;
				}
			}
		}
		this.mSaveFileList.Sort(delegate(SaveFileInfo x, SaveFileInfo y)
		{
			if (x.isBroken)
			{
				if (y.isBroken)
				{
					return 0;
				}
				return 1;
			}
			else
			{
				if (y.isBroken)
				{
					return -1;
				}
				string filenameNoAutoSave2 = x.FilenameNoAutoSave;
				string filenameNoAutoSave3 = y.FilenameNoAutoSave;
				if (filenameNoAutoSave2 == filenameNoAutoSave3)
				{
					return y.saveInfo.date.CompareTo(x.saveInfo.date);
				}
				return datesByFilenameNoAutoSave[filenameNoAutoSave3].CompareTo(datesByFilenameNoAutoSave[filenameNoAutoSave2]);
			}
		});
	}
}
